#!/usr/bin/env ruby

# A utility to help get information about Unity projects
# ---

command = ARGV[0]

commands = {}
[
    :version,
    :gitignore
].each do |cmd|
    commands[cmd] = cmd.to_s
end

unless commands.values.include? command
    puts "Unknown command '#{command}'."
    puts "Available commands are:"

    commands.each do |cmd|
        puts "- #{cmd}"
    end

    exit 1
end

#
# Get a project's Unity version
#

if command == commands[:version]

    version_filename = "ProjectSettings/ProjectVersion.txt"
    version_file     = File.expand_path(version_filename)

    unless File.exists? version_file
        raise "#{version_filename} doesn't exist in this directory!"
        exit 1
    end

    contents = File.read(version_file)

    puts "Version: " + contents.split("\n").first.chomp.gsub("m_EditorVersion: ", "")
end



#
# Generate a .gitignore file
#

if command == commands[:gitignore]

    gitignore_filename = File.expand_path(".gitignore")

    if File.exists? gitignore_filename
        puts ".gitignore already exists! Aborting..."
        exit 1
    end

    contents = <<EOF
/[Ll]ibrary/
/[Tt]emp/
/[Oo]bj/
/[Bb]uild/
/[Bb]uilds/
/Assets/AssetStoreTools*

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd

# Unity3D generated meta files
*.pidb.meta

# Unity3D Generated File On Crash Reports
sysinfo.txt

# Builds
*.apk
*.unitypackage
iOS/

EOF

    File.open(gitignore_filename, "w+") { |f| f.write(contents) }

end


